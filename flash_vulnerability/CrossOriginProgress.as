package
{
   import flash.display.Loader;
   import flash.display.LoaderInfo;
   import flash.display.Sprite;
   import flash.events.Event;
   import flash.events.HTTPStatusEvent;
   import flash.events.IEventDispatcher;
   import flash.events.IOErrorEvent;
   import flash.events.ProgressEvent;
   import flash.external.ExternalInterface;
   import flash.net.URLRequest;
   
   public class CrossOriginProgress extends Sprite
   {
       
      
      public var loader:Loader;
      
      public var callback_func:String;
      
      public function CrossOriginProgress()
      {
         super();
         if(stage)
         {
            this.init();
         }
         else
         {
            addEventListener(Event.ADDED_TO_STAGE,this.init);
         }
      }
      
      private function init(param1:Event = null) : void
      {
         ExternalInterface.addCallback("start_load",this.start_load);
         removeEventListener(Event.ADDED_TO_STAGE,this.init);
      }
      
      private function start_load(param1:String, param2:String) : void
      {
         this.loader = new Loader();
         this.callback_func = param2;
         this.configureListeners(this.loader.contentLoaderInfo);
         this.loader.load(new URLRequest(param1));
      }
      
      private function configureListeners(param1:IEventDispatcher) : void
      {
         param1.addEventListener(Event.COMPLETE,this.completeHandler);
         param1.addEventListener(HTTPStatusEvent.HTTP_STATUS,this.httpStatusHandler);
         param1.addEventListener(Event.INIT,this.initHandler);
         param1.addEventListener(IOErrorEvent.IO_ERROR,this.ioErrorHandler);
         param1.addEventListener(Event.OPEN,this.openHandler);
         param1.addEventListener(ProgressEvent.PROGRESS,this.progressHandler);
         param1.addEventListener(Event.UNLOAD,this.unLoadHandler);
      }
      
      private function logger(param1:*) : void
      {
         ExternalInterface.call("console.log","logger: ",param1);
         ExternalInterface.call(this.callback_func,param1);
      }
      
      private function completeHandler(param1:Event) : void
      {
         var event:Event = param1;
         this.logger("completeHandler: " + event);
         try
         {
            this.logger(LoaderInfo(this.loader.contentLoaderInfo).url);
            return;
         }
         catch(e:*)
         {
            logger(e);
            return;
         }
      }
      
      private function httpStatusHandler(param1:HTTPStatusEvent) : void
      {
         this.logger("httpStatusHandler: " + param1);
      }
      
      private function initHandler(param1:Event) : void
      {
         this.logger("initHandler: " + param1);
      }
      
      private function ioErrorHandler(param1:IOErrorEvent) : void
      {
         this.logger("ioErrorHandler: " + param1);
      }
      
      private function openHandler(param1:Event) : void
      {
         this.logger("openHandler: " + param1);
      }
      
      private function progressHandler(param1:ProgressEvent) : void
      {
         var event:ProgressEvent = param1;
         this.logger("progressHandler: bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
         try
         {
            this.logger(this.loader);
            return;
         }
         catch(e:*)
         {
            logger(e);
            return;
         }
      }
      
      private function unLoadHandler(param1:Event) : void
      {
         this.logger("unLoadHandler: " + param1);
      }
   }
}
